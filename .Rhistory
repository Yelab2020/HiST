labs(x="",y="",color = "avg.exp.scaled", size = "pct.exp",title = `gene`) +
guides(color = guide_colorbar(), size = guide_legend()) +
theme(text = element_text(family = "Arial",face = 'bold'),
plot.title = element_text(hjust = 0.5, size = 20))
return(plot)
}
create_dotplot(HCCm_endo_filtered,'Ctsd')
create_dotplot(HCCm_endo_filtered,'Ctsa')
create_dotplot(HCCm_endo_filtered,'Ctsl')
create_dotplot(HCCm_endo_filtered,'Ctsb')
create_dotplot(HCCm_endo_filtered,'Ctsk')
create_dotplot(HCCm_endo_filtered,'Ctsf')
create_dotplot(HCCm_endo_filtered,'Casp3')
create_dotplot(HCCm_endo_filtered,'F2')
create_dotplot(HCCm_endo_filtered,'Casp2')
create_dotplot(HCCm_endo_filtered,'Casp7')
create_dotplot(HCCm_endo_filtered,'Ctsd')
create_dotplot(HCCm_endo_filtered,'Ctsa')
create_dotplot(HCCm_endo_filtered,'Ctsl')
create_dotplot(HCCm_endo_filtered,'Ctsb')
create_dotplot(HCCm_endo_filtered,'Ctsk')
create_dotplot(HCCm_endo_filtered,'Ctsf')
create_dotplot(HCCm_endo_filtered,'Ctsl')
FeaturePlot(HCCm_endo_filtered,'Ctsl')
FeaturePlot(HCCm_endo_filtered,'F2')
create_dotplot(HCCm_endo_filtered,'Casp1')
HCCh <- readRDS('D:/Liwei/keti/炎癌转化炎症因子/human_public/HCC_human_public.rds')
HCCh$cell_type %>% table
create_dotplot <- function(seurat_obj,gene) {
# 提取基因表达数据
gene_expression <- FetchData(seurat_obj, vars = gene)
# 提取元数据
meta_data <- seurat_obj@meta.data
# 将基因表达数据添加到元数据中
meta_data$`gene` <- gene_expression
expression_sum <- meta_data %>%
dplyr::group_by(orig.ident, cell_type) %>%
dplyr::summarise(
Gene_Expressed = mean(`gene` > 0),
Total_Gene_Expression = mean(`gene`[,1])
)
expression_sum$Total_Gene_Expression <- scale(expression_sum$Total_Gene_Expression)
# 创建dotplot
plot <- ggplot(expression_sum, aes(x = orig.ident, y = cell_type)) +
geom_point(aes(size = Gene_Expressed, color = Total_Gene_Expression)) +
scale_color_gradient(low = "#EEE2DE", high = "#B31312") +
theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size =14),
axis.text.y = element_text(size = 14))+
labs(x="",y="",color = "avg.exp.scaled", size = "pct.exp",title = `gene`) +
guides(color = guide_colorbar(), size = guide_legend()) +
theme(text = element_text(family = "Arial",face = 'bold'),
plot.title = element_text(hjust = 0.5, size = 20))
return(plot)
}
create_dotplot(HCCh,'Casp1')
create_dotplot(HCCh,'CASP1')
create_dotplot(HCCh,'CASP7')
create_dotplot(HCCh,'F2')
create_dotplot(HCCh,'CASDL')
create_dotplot(HCCh,'CTSD')
create_dotplot(HCCh,'CTSL')
create_dotplot(HCCh,'CTSB')
create_dotplot(HCCh,'CTSL')
create_dotplot(HCCh,'CTSA')
create_dotplot(HCCh,'CTSK')
create_dotplot(HCCh,'CASP3')
create_dotplot(HCCh,'CTSL')
HCCh$cell_type %>% table
HCCh[,c('cell_type','orig.ident')] %>% table
HCCh@meta.data[,c('cell_type','orig.ident')] %>% table
DimPlot(HCCh,group.by = 'cell_type',label = T)
FeaturePlot(HCCh,'nCount_RNA')
FeaturePlot(HCCh,'nFeature_RNA')
FeaturePlot(HCCh,'percent.mito')
DimPlot(HCCh,group.by = 'cell_type',label = T)
FeaturePlot(HCCh,'MIK67')
FeaturePlot(HCCh,'MKI67')
DimPlot(HCCh,group.by = 'cell_type',label = T)
FeaturePlot(HCCh,'LHX2')
FeaturePlot(HCCh,'HGF')
FeaturePlot(HCCh,'COL1A1')
DotPlot(HCCh,c('ALB','APOE','CPS1','IL7R','THEMIS','NKG7','CD163','FCGR2A','HGF','COLEC11','DCN','KDR','ENG','MS4A1','BLK','JCHAIN','IGKC','TOP2A','MKI67','ANXA4','CFTR'),group.by = 'cel_type')
DotPlot(HCCh,c('ALB','APOE','CPS1','IL7R','THEMIS','NKG7','CD163','FCGR2A','HGF','COLEC11','DCN','KDR','ENG','MS4A1','BLK','JCHAIN','IGKC','TOP2A','MKI67','ANXA4','CFTR'),group.by = 'cell_type')
DimPlot(HCCh,reduction = 'umap',group.by = 'cell_type',label = T)
FeaturePlot(HCCh,c('ALB','APOE','CPS1'))
DimPlot(HCCh,reduction = 'umap',group.by = 'orig.ident',label = T)
DotPlot(HCCh,c('ALB','APOE','CPS1','IL7R','THEMIS','NKG7','CD163','FCGR2A','HGF','COLEC11','DCN','KDR','ENG','MS4A1','BLK','JCHAIN','IGKC','TOP2A','MKI67','ANXA4','CFTR'),group.by = 'cell_type')
devtools::install_github("Sciurus365/fitlandr")
simlandr::sim_fun_grad(length = 200, seed = 1614)
simlandr::sim_fun_grad(length = 200, seed = 1614) %>% head()
??sim_fun_grad
install.packages('raster')
install.packages('rasterVis')
#gradient----
library(raster)
brain <- LoadData("stxBrain", type = "anterior1")
library(SeuratData)
library(Seurat)
library(ggplot2)
brain <- LoadData("stxBrain", type = "anterior1")
brain <- NormalizeData(brain,assay = 'Spatial')
m2 <- brain@assays$Spatial@data['Gng4',]
genexpr <- brain@assays$Spatial@data['Gng4',]
genexpr <- as.data.frame(t(as.data.frame(genexpr)))
rownames(genexpr) <- paste0(posi_csv$row,'-',posi_csv$col)
posi_csv <- brain@images$anterior1@coordinates
posi_csv <- tibble::rownames_to_column(posi_csv,var = 'barcode')
View(posi_csv)
rownames(genexpr) <- paste0(posi_csv$row,'-',posi_csv$col)
View(genexpr)
genexpr <- brain@assays$Spatial@data['Gng4',]
genexpr <- as.data.frame(t(as.data.frame(genexpr)))
posi_csv <- brain@images$anterior1@coordinates
posi_csv <- tibble::rownames_to_column(posi_csv,var = 'barcode')
rownames(genexpr) <- paste0(posi_csv$row,'-',posi_csv$col)
genexpr <- brain@assays$Spatial@data['Gng4',]
genexpr <- as.data.frame(genexpr)
View(genexpr)
posi_csv <- brain@images$anterior1@coordinates
posi_csv <- tibble::rownames_to_column(posi_csv,var = 'barcode')
rownames(genexpr) <- paste0(posi_csv$row,'-',posi_csv$col)
create_geneMatrix <- function(tmp) {
zero_array <- array(0, dim = c(76, 128, ncol(tmp)))
rownames_split <- strsplit(rownames(tmp), split = '-')
rows <- as.numeric(sapply(rownames_split, function(x) as.numeric(x[1])))
cols <- as.numeric(sapply(rownames_split, function(x) as.numeric(x[2])))
for (j in 1:ncol(tmp)) {
zero_array[cbind(rows+1, cols+1, rep(j,nrow(tmp)))] <- tmp[, j]#rows+1+2  +1 means 0->1 ;  +2 means 76->80
}
return(zero_array)
}
geneMatrix <- create_geneMatrix(genexpr)
create_geneMatrix <- function(tmp) {
zero_array <- array(0, dim = c(76, 128))
rownames_split <- strsplit(rownames(tmp), split = '-')
rows <- as.numeric(sapply(rownames_split, function(x) as.numeric(x[1])))
cols <- as.numeric(sapply(rownames_split, function(x) as.numeric(x[2])))
for (j in 1:ncol(tmp)) {
zero_array[cbind(rows+1, cols+1)] <- tmp[, j]#rows+1+2  +1 means 0->1 ;  +2 means 76->80
}
return(zero_array)
}
geneMatrix <- create_geneMatrix(genexpr)
View(geneMatrix)
m2 <- geneMatrix
r=raster(t(m2[,ncol(m2):1]), xmn=0.5,xmx=nrow(m2)+.5, ymn=0.5,ymx=ncol(m2)+0.5)
projection(r)=CRS("+init=epsg:27700")
persp(r,theta=-50,phi=20, shade=0.23,col="red")
vectorplot(r, scaleSlope=.1)
??vectorplot
?levelplot
levelplot(r)
?vectorplot
??vectorplot
library(raster)
install.packages('rasterVis')
library(rasterVis)
install.packages('rasterVis')
BiocManager::install('rasterVis')
View(r)
BiocManager::install('rasterVis')
library(rasterVis)
BiocManager::install('lattice')
install.packages('lattice')
install.packages('lattice')
save.image("D:/Liwei/keti/local_R_workspace/240329.RData")
BiocManager::install('rasterVis')
load('D:/Liwei/keti/local_R_workspace/240329.RData')
library(rasterVis)
vectorplot(r, scaleSlope=.1)
??vectorplot
rasterVis::vectorplot(r, scaleSlope=.1)
library(fields)
install.packages("fields")
library(plotly)
# Resolution
res = 0.1
# Sequence of X
seq.x = seq(0,1,by = res)
# Make a matrix
space = outer(seq.x,seq.x,"*")
image.plot(space,
ylim=c(1.05,-0.05),
ylab= "Percentage of Chromosome EF of TD form",
xlab= "Percentage of Chromosome CD of BL form")
?image.plot
??image.plot
library(fields)
library(plotly)
image.plot(space,
ylim=c(1.05,-0.05),
ylab= "Percentage of Chromosome EF of TD form",
xlab= "Percentage of Chromosome CD of BL form")
image.plot(m2)
library(tidyverse)
library(ggquiver)
raster2quiver <- function(rast, aggregate = 50, colours = terrain.colors(6), contour.breaks = 200)
{
names(rast) <- "z"
quiv <- aggregate(rast, aggregate)
terr <- terrain(quiv, opt = c('slope', 'aspect'))
quiv$u <- -terr$slope[] * sin(terr$aspect[])
quiv$v <- -terr$slope[] * cos(terr$aspect[])
quiv_df <- as.data.frame(quiv, xy = TRUE)
rast_df <- as.data.frame(rast, xy = TRUE)
print(ggplot(mapping = aes(x = x, y = y, fill = z)) +
geom_raster(data = rast_df, na.rm = TRUE) +
geom_contour(data = rast_df,
aes(z=z, color=..level..),
breaks = seq(0,3, length.out = contour.breaks),
size = 1.4)+
scale_color_gradient(low="blue", high="red")+
geom_quiver(data = quiv_df, aes(u = u, v = v), vecsize = 1.5) +
scale_fill_gradientn(colours = colours, na.value = "transparent") +
theme_bw())
return(quiv_df)
}
r <-raster(
space,
xmn=range(seq.x)[1], xmx=range(seq.x)[2],
ymn=range(seq.x)[1], ymx=range(seq.x)[2],
crs=CRS("+proj=utm +zone=11 +datum=NAD83")
)
r=raster(t(m2[,ncol(m2):1]), xmn=0.5,xmx=nrow(m2)+.5, ymn=0.5,ymx=ncol(m2)+0.5)
# Draw the adaptive landscape
raster2quiver(rast = r, aggregate = 2, colours = tim.colors(100))
# Draw the adaptive landscape
raster2quiver(rast = r, aggregate = 2, colours = tim.colors(100))
raster2quiver(r)
r=raster(t(m2[,ncol(m2):1]), xmn=0.5,xmx=nrow(m2)+.5, ymn=0.5,ymx=ncol(m2)+0.5)
projection(r)=CRS("+init=epsg:27700")
# Draw the adaptive landscape
raster2quiver(rast = r, aggregate = 2, colours = tim.colors(100))
library(ggquiver)
BiocManager::install(ggquiver)
BiocManager::install('ggquiver')
library(ggquiver)
# Draw the adaptive landscape
raster2quiver(rast = r, aggregate = 2, colours = tim.colors(100))
# projection(r)=CRS("+init=epsg:27700")
projection(r) = CRS("+proj=utm +zone=11 +datum=NAD83"
)
# Draw the adaptive landscape
raster2quiver(rast = r, aggregate = 2, colours = tim.colors(100))
?raster
system.file("external/test.grd", package="raster")
r
r$layer
getData('alt', country='FRA', mask=TRUE)
?aggregate()
brain@images$anterior1@image
brain@images$anterior1@scale.factors
x <- raster(ncol=128, nrow=76, xmn=0, xmx=2000, ymn=0, ymx=2000)
res(x)
projection(x) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84"
values(x) <- genexpr
list(genexpr)
values(x) <- m2
plot(x)
persp(r,theta=-50,phi=20, shade=0.23,col="red")
persp(x,theta=-50,phi=20, shade=0.23,col="red")
rasterVis::vectorplot(x, scaleSlope=.1)
?vectorplot
library(Seurat)
SpatialFeaturePlot(brain,features = 'CD3E')
SpatialFeaturePlot(brain,features = 'EPCAM')
SpatialFeaturePlot(brain,features = 'Epcam')
SpatialDimPlot(brain)
Seurat::SpatialDimPlot(brain)
View(brain)
brain <- LoadData("stxBrain", type = "anterior1")
library(SeuratData)
library(Seurat)
brain <- LoadData("stxBrain", type = "anterior1")
brain <- NormalizeData(brain,assay = 'Spatial')
brain <- ScaleData(brain,assay = 'Spatial')
gene <- 'Gng4'
SpatialFeaturePlot(
object = brain,
features = gene,
alpha = c(0.1, 1)
)
raster2quiver <- function(rast, aggregate = 50, colours = terrain.colors(6))
{
names(rast) <- "z"
quiv <- aggregate(rast, aggregate)
terr <- terrain(quiv, opt = c('slope', 'aspect'))
quiv$u <- terr$slope[] * sin(terr$aspect[])
quiv$v <- terr$slope[] * cos(terr$aspect[])
quiv_df <- as.data.frame(quiv, xy = TRUE)
rast_df <- as.data.frame(rast, xy = TRUE)
print(ggplot(mapping = aes(x = x, y = y, fill = z)) +
geom_raster(data = rast_df, na.rm = TRUE) +
geom_quiver(data = quiv_df, aes(u = u, v = v), vecsize = 1.5) +
scale_fill_gradientn(colours = colours, na.value = "transparent") +
theme_bw())
return(quiv_df)
}
raster2quiver(x, aggregate = 20, colours = c("#FFFFFF00", "red"))
x
?terrain
raster2quiver(x, aggregate = 10, colours = c("#FFFFFF00", "red"))
raster2quiver(x, aggregate = 0, colours = c("#FFFFFF00", "red"))
raster2quiver(x, aggregate = 1, colours = c("#FFFFFF00", "red"))
raster2quiver(x, aggregate = 10, colours = c("#FFFFFF00", "red"))
raster2quiver(x, aggregate = 2, colours = c("#FFFFFF00", "red"))
raster2quiver(x, aggregate = 3, colours = c("#FFFFFF00", "red"))
projection(x) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=0 +ellps=WGS84"
raster2quiver(x, aggregate = 3, colours = c("#FFFFFF00", "red"))
projection(x) <- "+proj=lcc +ellps=WGS84"
projection(x) <- "+proj=utm +zone=11 +datum=NAD83"
raster2quiver(x, aggregate = 3, colours = c("#FFFFFF00", "red"))
x
as.data.frame(rast, xy = TRUE) %>% head
as.data.frame(x, xy = TRUE) %>% head
?geom_segment
raster2quiver(x, aggregate = 1, colours = c("#FFFFFF00", "red"))
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
rm(list = ls())
gc()
load("D:/Liwei/keti/local_R_workspace/240329.RData")
library(tidyverse)
library(ggquiver)
library(raster)
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
load("D:/Liwei/keti/local_R_workspace/240329.RData")
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
rm(list = ls())
gc()
library(SeuratData)
library(Seurat)
library(ggplot2)
brain <- LoadData("stxBrain", type = "anterior1")
brain <- NormalizeData(brain,assay = 'Spatial')
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
install.packages('ggplot2')
remotes::install_github("thomasp85/patchwork")
library(SeuratData)
library(Seurat)
brain <- LoadData("stxBrain", type = "anterior1")
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
remove.packages("ggplot2")
install.packages('ggplot2')
BiocManager::install('ggplot2')
library(ggplot2)
SpatialFeaturePlot(brain, features = NULL, alpha = c(0))
load('D:/Liwei/keti/local_R_workspace/240329.RData')
R
install.packages("pacman")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","httr","qs"))
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
metanr_packages <- function(){
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","devtools","crmn","httr","qs")
list_installed <- installed.packages()
new_pkgs <- subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
if(length(new_pkgs)!=0){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_pkgs)
print(c(new_pkgs, " packages added..."))
}
if((length(new_pkgs)<1)){
print("No new packages added...")
}
}
metanr_packages()
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
vignette(package="MetaboAnalystR")
browseVignettes("MetaboAnalystR")
library(MetaboAnalystR)
library(OptiLCMS)
?ImportRawMSData
??ImportRawMSData
devtools::install_github("xia-lab/OptiLCMS", build = TRUE, build_vignettes = T, build_manual =TRUE)
devtools::install_github("xia-lab/OptiLCMS", build = TRUE, build_vignettes = F, build_manual =TRUE)
# Load OptiLCMS
library(OptiLCMS)
?ImportRawMSData
mSet <- ImportRawMSData(path = 'D:/DOWNLOAD/DS_3.mzML', plotSettings = SetPlotParam(Plot = T))
mSet <- PerformROIExtraction(datapath = 'D:/DOWNLOAD/DS_3.mzML', rt.idx = 0.9, rmConts = TRUE);
mSet <- ImportRawMSData(path = 'D:/DOWNLOAD/tmp', plotSettings = SetPlotParam(Plot = T))
mSet <- ImportRawMSData(path = 'D:/DOWNLOAD/tmp', plotSettings = SetPlotParam(Plot = T))
load('D:/Liwei/keti/local_R_workspace/240329.RData')
create_dotplot(HCCh,gene = 'GATA3')
library(Seurat)
create_dotplot(HCCh,gene = 'GATA3')
library(magrittr)
create_dotplot(HCCh,gene = 'GATA3')
library(ggplot2)
create_dotplot(HCCh,gene = 'GATA3')
FeaturePlot(HCCh,'GATA3')
create_dotplot(HCCh,gene = 'GATA3')
create_dotplot(HCCm,gene = 'Gata3')
create_dotplot(HCCh,gene = 'IL1RAP')
create_dotplot(HCCh,gene = 'CCR10')
create_dotplot(HCCh,gene = 'CD194')
create_dotplot(HCCh,gene = 'CD4')
DotPlot(HCCh,c('CD3','CD4','CD30','CCR4','IL2','IL4'))
DotPlot(HCCh,c('CD3','CD4','CD30','CCR4','IL2','IL4'),group.by = 'orig.ident')
DotPlot(HCCh,c('IL4','IL13','GATA3','STAT6'),group.by = 'orig.ident')
DotPlot(HCCh,c('IL4','IL13','GATA3'),group.by = 'orig.ident')
DotPlot(HCCm,c('Il4','Il13','Gata3','Stat6'),group.by = 'orig.ident')
DotPlot(HCCh,c('IL4','IL13','GATA3','STAT6'),group.by = 'cell_type')
DotPlot(HCCm,c('Il4','Il13','Gata3','Stat6'),group.by = 'cell_type')
DotPlot(HCCh,c('PRTN3'),group.by = 'cell_type')
DotPlot(HCCm,c('Prtn3'),group.by = 'cell_type')
DotPlot(HCCm,c('Ctsg'),group.by = 'cell_type')
DotPlot(HCCm,c('Ctsd'),group.by = 'cell_type')
grep('Cts',rownames(HCCm@assays$RNA))
grep('Cts',rownames(HCCm@assays$RNA),value = T)
DotPlot(HCCm,grep('Cts',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')
create_dotplot(HCCm,'Ctsl')
create_dotplot(HCCm,'Ctsk')
create_dotplot(HCCm,'Ctsd')
create_dotplot(HCCm,'Ctsa')
create_dotplot(HCCm,'Ctsb')
grep('PRn',rownames(HCCm@assays$RNA))
grep('Prn',rownames(HCCm@assays$RNA))
grep('Prn',rownames(HCCm@assays$RNA),value = T)
grep('Prtn',rownames(HCCm@assays$RNA),value = T)
create_dotplot(HCCm,'Prtn3')
grep('Capn',rownames(HCCm@assays$RNA),value = T)
DotPlot(HCCm,grep('Capn',rownames(HCCm@assays$RNA),value = T))
DotPlot(HCCm,grep('Capn',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')
create_dotplot(HCCm,'Capn2')
grep('Gzm',rownames(HCCm@assays$RNA),value = T)
DotPlot(HCCm,grep('Gzm',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')
create_dotplot(HCCm,'Prtn3')
DotPlot(HCCm,grep('Cma',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')
DotPlot(HCCm,grep('Cma1',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')
grep('CTS',rownames(HCCh@assays$RNA),value = T)
DotPlot(HCCh,grep('CTS',rownames(HCCh@assays$RNA),value = T),group.by = 'cell_type')
DotPlot(HCCh,grep('CTS',rownames(HCCh@assays$RNA),value = T),group.by = 'cell_type')+ theme(axis.text.x = element_text(angle = 45,hjust = 1))
create_dotplot(HCCh,'CTSB')
create_dotplot(HCCh,'CTSL')
create_dotplot(HCCh,'CTSD
')
create_dotplot(HCCh,'CTSD')
HCCh@assays$RNA['CTSD',]
HCCh@assays$RNA[,'CTSD']
HCCh@assays$RNA %>% class
tmp <- as.matrix(HCCh@assays$RNA)
HCCh@assays$RNA@data['CTSD',]
HCCh@assays$RNA@data['CTSD',] %>% table
is.na(HCCh@assays$RNA@data['CTSD',]) %>% count
is.na(HCCh@assays$RNA@data['CTSD',])
is.na(HCCh@assays$RNA@data['CTSD',]) %>% any()
grep('PRTN',rownames(HCCh@assays$RNA),value = T)
create_dotplot(HCCh,'PRTN3')
grep('CAPN',rownames(HCCh@assays$RNA),value = T)
DotPlot(HCCh,grep('CAPN',rownames(HCCh@assays$RNA),value = T),group.by = 'cell_type')+ theme(axis.text.x = element_text(angle = 45,hjust = 1))
DotPlot(HCCm,grep('Capn',rownames(HCCm@assays$RNA),value = T),group.by = 'cell_type')+ theme(axis.text.x = element_text(angle = 45,hjust = 1))
create_dotplot(HCCh,'CAPN2')
grep('GAM',rownames(HCCh@assays$RNA),value = T)
grep('GZM',rownames(HCCh@assays$RNA),value = T)
DotPlot(HCCh,grep('GZM',rownames(HCCh@assays$RNA),value = T),group.by = 'cell_type')
grep('CMA',rownames(HCCh@assays$RNA),value = T)
DotPlot(HCCh,grep('CMA1',rownames(HCCh@assays$RNA),value = T),group.by = 'cell_type')
??GSEA
??moran
setwd("D:/Liwei/keti/空转/code/HiST_public/")
ll
data_path <- "./data/seurat_obj"
loc_pattern <- "\\.rds*"
list.files(data_path, pattern = loc_pattern, recursive = T, full.names = T)
genelist <- read.csv('./resource/CRC_SVG346_list.txt',header = F)$V1
#get geneMatrix
rds_count_path <- './output/geneMatrix/count/'
rds_normedgene_path <- './output/geneMatrix/normed/'
csv_cnt_path <- './output/geneMatrix/cnt_csv/'
rds_mask_path <- './output/mask_rds/'
loc_pattern <- "\\.rds*"
seurat_obj_rds_paths <- list.files(data_path, pattern = loc_pattern, recursive = T, full.names = T)
basename(seurat_obj_rds_paths)
gsub(loc_pattern, "", basename(seurat_obj_rds_paths))
strsplit(seurat_obj_rds_paths,"\\.")
sample_list <- basename(seurat_obj_rds_paths)
strsplit(sample_list,"\\.")
basename("CRC1")
loc_pattern <- "\\.rds*"
seurat_obj_rds_paths <- list.files(data_path, pattern = loc_pattern, recursive = T, full.names = T)
sample_list <- basename(basename(seurat_obj_rds_paths))
seurat_obj_rds_paths
basename(basename(seurat_obj_rds_paths))
basename(seurat_obj_rds_paths)
filenames_no_ext (seurat_obj_rds_paths)
seurat_obj_rds_paths <- list.files(data_path, pattern = loc_pattern, recursive = T, full.names = T)
sample_list <- basename(seurat_obj_rds_paths)
loc_pattern <- "\\.rds\\.gz$"
seurat_obj_rds_paths <- list.files(data_path, pattern = loc_pattern, recursive = T, full.names = T)
sample_list <- gsub(loc_pattern, "", basename(seurat_obj_rds_paths))
loc_rds <- readRDS("./data/seurat_obj/CRC2.rds.gz")
posi_csv <- loc_rds@images$image@coordinates
posi_csv <- tibble::rownames_to_column(posi_csv,var = 'barcode')
loc_rds@meta.data$DefineTypes %>% unique()
library(magrittr)
loc_rds@meta.data$DefineTypes %>% unique()
loc_rds@meta.data %>% head
library(Seurat)
SpatialDimPlot(loc_rds,group.by = "DefineTypes")
View(loc_rds)
df <- loc_rds@meta.data
df$Location[df$DefineTypes == "Tumor"] <- "Mal"
df$Location[df$DefineTypes == "Trans"] <- "Bdy"
df$Location[df$DefineTypes == "OutSpots"] <- "nMal"
loc_rds@meta.data <- df
SpatialDimPlot(loc_rds,group.by = "Location")
loc_rds@meta.data
saveRDS(loc_rds,file = "./data/seurat_obj/CRC2.rds.gz")
loc_rds <- readRDS("./data/seurat_obj/CRC2.rds.gz")
loc_rds@meta.data
